AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Az1:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a
  Az2:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1b
  Az3:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1c
  VPCCidrBlock:
    Type: String
    Default: "10.0.0.0/16"

  SubnetCidrBlocks:
    Type: CommaDelimitedList
    Default: >
      10.0.0.0/22,
      10.0.4.0/22,
      10.0.8.0/22,
      10.0.12.0/22,
      10.0.16.0/22,
      10.0.20.0/22

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}VPC"
  
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}IGW"

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}RT"

  RouteToIGW:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:      
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RouteTable
  
  #RouteToLocal:
  #  Type: AWS::EC2::Route
  #  DependsOn: AttachIGW
  #  Properties:      
  #    RouteTableId: !Ref RouteTable
  #    DestinationCidrBlock: 10.0.0.0/16
  #    GatewayId: "local"

  PubSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref Az1
      CidrBlock: !Select [0, !Ref SubnetCidrBlocks]
      EnableDns64: false
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub "${AWS::StackName}SubnetPub1"
      VpcId: !Ref VPC
  
  PubSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref Az2
      CidrBlock: !Select [1, !Ref SubnetCidrBlocks]
      EnableDns64: false
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub "${AWS::StackName}SubnetPub2"
      VpcId: !Ref VPC

  PubSubnetC:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref Az3
      CidrBlock: !Select [2, !Ref SubnetCidrBlocks]
      EnableDns64: false
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub "${AWS::StackName}SubnetPub3"
      VpcId: !Ref VPC

  PriSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref Az1
      CidrBlock: !Select [3, !Ref SubnetCidrBlocks]
      EnableDns64: false
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: !Sub "${AWS::StackName}SubnetPriv1"
      VpcId: !Ref VPC


  PriSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref Az2
      CidrBlock: !Select [4, !Ref SubnetCidrBlocks]
      EnableDns64: false
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: !Sub "${AWS::StackName}SubnetPriv2"
      VpcId: !Ref VPC

  PriSubnetC:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref Az3
      CidrBlock: !Select [5, !Ref SubnetCidrBlocks]
      EnableDns64: false
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: !Sub "${AWS::StackName}SubnetPriv3"
      VpcId: !Ref VPC

  SubnetPub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetA
      RouteTableId: !Ref RouteTable

  SubnetPub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetB
      RouteTableId: !Ref RouteTable
  
  SubnetPub3RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetC
      RouteTableId: !Ref RouteTable

  SubnetPub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PriSubnetA
      RouteTableId: !Ref RouteTable

  SubnetPub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PriSubnetB
      RouteTableId: !Ref RouteTable

  SubnetPub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PriSubnetC
      RouteTableId: !Ref RouteTable

Outputs:
  VpcId:
    Value: !Ref VPC
    Export:
      Name: VpcId
  VpcCidrBlock:
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: VPCCidrBlock
  SubnetCidrBlocks:
    Value: !Join [",", !Ref SubnetCidrBlocks]
    Export:
      Name: SubnetCidrBlocks
  PublicSubnetIds:
    Value: !Join 
      - ","
      - - !Ref PubSubnetA
        - !Ref PubSubnetB
        - !Ref PubSubnetC
    Export:
      Name: !Sub "${AWS::StackName}PublicSubnetIds"
  PrivateSubnetIds:
    Value: !Join 
      - ","
      - - !Ref PriSubnetA
        - !Ref PriSubnetB
        - !Ref PriSubnetC
    Export:
      Name: !Sub "${AWS::StackName}PrivateSubnetIds"
  AvailabilityZones:
    Value: !Join 
      - ","
      - - !Ref Az1
        - !Ref Az2
        - !Ref Az3
    Export:
      Name: !Sub "${AWS::StackName}AvailabilityZones"




